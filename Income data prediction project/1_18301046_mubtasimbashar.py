# -*- coding: utf-8 -*-
"""1_18301046_MubtasimBashar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p-Y9LnRo4E_R8GR4HH27KPhaG7ZxaZTR
"""

import sklearn
import numpy as np
import pandas as pa
import matplotlib.pyplot as plot

incomeData = pa.read_csv('/content/sample_data/Income Dataset (50k).csv')
incomeData.head(10)
#print(incomeData)

incomeData.shape

incomeData.isnull().sum()

incomeData.info()

#Dropping the null rows from the colums
incomeData=incomeData.dropna(axis=0, subset=['occupation','native-country','workclass'])
print('shape :',incomeData.shape)

incomeData['workclass'].unique()
 
category_enc2 = pa.get_dummies(incomeData['workclass'])

category_enc2.head(10)

incomeData['marital-status'].unique()
category_enc3 = pa.get_dummies(incomeData['marital-status']) 
category_enc3.head(10)

incomeData['occupation'].unique()
category_enc1 = pa.get_dummies(incomeData['occupation']) 
category_enc1.head(10)

incomeData['gender'].unique()

from sklearn.preprocessing import LabelEncoder
en = LabelEncoder()
incomeData['gender_new']=en.fit_transform(incomeData['gender'])
print(incomeData[['gender','gender_new']].head())
incomeData['gender']=incomeData['gender_new']


incomeData.head(10)

incomeData['race'].unique()



from sklearn.preprocessing import LabelEncoder
en = LabelEncoder()
incomeData['race_new']=en.fit_transform(incomeData['race'])
print(incomeData[['race','race_new']].head())
incomeData['race']=incomeData['race_new']
incomeData.head(10)

incomeData.info()

incomeData.keys()

the_final_data = pa.concat([incomeData[['age','fnlwgt','race_new','educational-num','capital-gain','capital-loss','hours-per-week','gender_new']],pa.concat([category_enc2]),pa.concat([category_enc3]),pa.concat([category_enc1])],axis=1)
the_final_data.head(10)

the_final_data.shape

f=the_final_data
l=incomeData['income_>50K']
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(f, l,test_size=0.3, random_state=1)
print(x_train.shape)
print(x_test.shape)

#scaling
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaler.fit(x_train)
scaler.fit(x_test)


x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)

#SVC

from sklearn.svm import SVC
svc = SVC(kernel="linear")
svc.fit(x_train, y_train)

svc_training_score = svc.score(x_train, y_train)
svc_testing_score = svc.score(x_test, y_test)


svc_predict = svc.predict(x_test)
print(svc_predict)


print("Training accuracy of SVC {:.2f}".format(svc_training_score))
print("Testing accuracy of SVC {:.2f}".format(svc_testing_score))

#RAndomForest
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=50)



rfc.fit(x_train, y_train)
rfc_training_score = rfc.score(x_train, y_train)
rfc_testing_score = rfc.score(x_test, y_test)



rf_predict = rfc.predict(x_test)
print(rf_predict)


print("The Training accuracy of RF  {:.2f}".format(rfc_training_score))
print("The Testing accuracy of RF {:.2f}".format(rfc_testing_score))

#NNC




from sklearn.neural_network import MLPClassifier
nnc=MLPClassifier(hidden_layer_sizes=(7), activation="relu", max_iter=10000)




nnc.fit(x_train, y_train)
nnc_training_score = nnc.score(x_train, y_train)
nnc_testing_score = nnc.score(x_test, y_test)


nnc_predict = nnc.predict(x_test)
print(nnc_predict)

print("The Training accuracy of NNC {:.2f}".format(nnc_training_score))
print("The Testing accuracy of NNC {:.2f}".format(nnc_testing_score))

#Scaler
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit(f)
f_scaled = scaler.transform(f)
 
income_dataframe = pa.DataFrame(f_scaled, columns=f.columns)


#PCA
from sklearn.decomposition import PCA 
pca_ = PCA(n_components=5)


pincipal = pca_.fit_transform(income_dataframe.values)
print(pincipal)


principal_dataframe = pa.DataFrame(data=pincipal, columns=     ["principle component 1",
                                                                "principle component 2",
                                                                "principle component 3",
                                                                "principle component 4",
                                                                "principle component 5"
                                                                ])
main_dataframe =pa.concat([principal_dataframe, l], axis=1)
main_dataframe.head()




f_new =main_dataframe.drop("income_>50K" , axis=1)
l_new =main_dataframe["income_>50K"]

x_train, x_test, y_train, y_test = train_test_split(f, l, test_size=0.2, random_state=2)

#SVCPOst

#scale

scaler = MinMaxScaler()

scaler.fit(x_train)
scaler.fit(x_test)


x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test) 

sv = SVC(kernel="linear")



sv.fit(x_train, y_train)
post_sv_training_score = sv.score(x_train, y_train)
post_sv_testing_score = sv.score(x_test, y_test)

print("Training accuracy of SVC2 {:.2f}".format(post_sv_training_score))
print("Testing accuracy of SVc2 {:.2f}".format(post_sv_testing_score))


post_sv_predict = svc.predict(x_test)
print(post_sv_predict)

#RF2
rf = RandomForestClassifier(n_estimators=50)
rf.fit(x_train, y_train)


post_rf_training_score = rf.score(x_train, y_train)
post_rf_testing_score = rf.score(x_test, y_test)

print("The Training accuracy of RF2 {:.2f}".format(post_rf_training_score))
print("The Testing accuracy of RF2  {:.2f}".format(post_rf_testing_score))


post_rf_predict = rf.predict(x_test)
print(post_rf_predict)

#NNC post

nn =MLPClassifier(hidden_layer_sizes=(7), activation="relu", max_iter=10000)


nn.fit(x_train, y_train)


post_nn_training_score = nn.score(x_train, y_train)
post_nn_testing_score = nn.score(x_test, y_test)

print("The Training accuracy of NNC2 {:.2f}".format(post_nn_training_score))
print("The Testing accuracy of NNC2 {:.2f}".format(post_nn_testing_score))


post_nn_predict = nnc.predict(x_test)
print(post_nn_predict )

#PLot
plot.bar(x = ["SVC_train", "post_SVC_train", "RF_train", "post_RF_train", "NNC_train", "post_NNC_train"],
        height = [svc_training_score, post_sv_training_score,rfc_training_score,
                  post_rf_training_score, nnc_training_score,post_nn_training_score])

plot.bar(x = ["SVC_test", "post_SVC_test", "RF_test", "post_RF_test", "NNC_test", "post_NNC-test"],
        height = [svc_testing_score, post_sv_testing_score, rfc_testing_score, post_rf_testing_score,
                  nnc_testing_score, post_nn_testing_score])